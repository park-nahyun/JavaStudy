/*=====================================
  ■■■ 연산자(Operator) ■■■
  - 비트 단위 연산자
=====================================*/

// 비트  shift 연산자

public class Test026
{	
	public static void main(String[] args)
	{
		int x=128;
		// 128    --> 000000000 000000000 00000000 10000000
		// 128<<3 --> 000000000 000000000 00000100 00000000

		// 128    --> 000000000 000000000 00000000 10000000
		// 128>>3 --> 000000000 000000000 00000000 00010000

		System.out.printf("x >> 3 = %d\n", (x<<3));
		System.out.printf("x * 9 = %d\n", (x*8));

		System.out.printf("x >> 3 = %d\n", (x>>3));
		System.out.printf("x / 8 = %d\n", (x / 8));

		System.out.println();
		System.out.printf("x << 24 = %d\n", (x<<24));
		// 100000000 000000000 000000000 000000000 0000000
		// x << 24 = -2147483648(음수 최댓값. 젤 처음이 바뀌지)
		// 얘를 왼쪽으로 25칸 하면? 표현 범위 넘어서
		System.out.printf("x << 25 = %d\n", (x<<25));
		// 1   0000000000 0000000000 0000000000 0000000000
		//--==>> c << 25 = 0
		// 사실 벼랑 밖으로 떨어지는게 아니라 저 뒤로 들어오게끔 돼있음. (자바는)
		// 근데 원래값을 복원할 때까지 숫자가 드러나지 않게 돼있음. 원래 지 자리(128자리) 올 때까지 0. 근데 이제 32비트가 돼서 그 다음부턴 증가된 값이 나옴.
		
		System.out.printf("x << 25 = %d\n", (x<<26));
		System.out.printf("x << 25 = %d\n", (x<<31));
		System.out.printf("x << 25 = %d\n", (x<<32));
		System.out.printf("x << 25 = %d\n", (x<<33));
		System.out.printf("x << 25 = %d\n", (x<<34));
		System.out.printf("x << 25 = %d\n", (x<<35));
	}
}

/*
x >> 3 = 1024
x * 9 = 1024
x >> 3 = 16
x / 8 = 16

x << 24 = -2147483648
x << 25 = 0
x << 25 = 0
x << 25 = 0
x << 25 = 128
x << 25 = 256
x << 25 = 512
x << 25 = 1024
계속하려면 아무 키나 누르십시오 . . .
 .
*/


